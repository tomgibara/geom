package com.tomgibara.geom.curve;

import java.util.List;

import com.tomgibara.geom.core.Context;
import com.tomgibara.geom.core.Norm;
import com.tomgibara.geom.core.Point;
import com.tomgibara.geom.core.Rect;
import com.tomgibara.geom.core.Tolerances;
import com.tomgibara.geom.core.Traceable;
import com.tomgibara.geom.core.Vector;
import com.tomgibara.geom.floats.FloatMapping;
import com.tomgibara.geom.floats.FloatRange;
import com.tomgibara.geom.floats.Mappable;
import com.tomgibara.geom.helper.Locator;
import com.tomgibara.geom.path.Parameterization;
import com.tomgibara.geom.path.Path;
import com.tomgibara.geom.path.PointPath;
import com.tomgibara.geom.path.SplitPath;
import com.tomgibara.geom.transform.Transform;

public abstract class Curve implements Traceable, Parameterization.ByIntrinsic, Mappable {

	// constants

	//from http://pomax.github.io/bezierinfo/

	  // Legendre-Gauss abscissae (xi values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))
	private static final float[][] tValues = {{},{},
			{  -0.5773502691896257645091487805019574556476f,0.5773502691896257645091487805019574556476f},
			{0f,-0.7745966692414833770358530799564799221665f,0.7745966692414833770358530799564799221665f},
			{  -0.3399810435848562648026657591032446872005f,0.3399810435848562648026657591032446872005f,-0.8611363115940525752239464888928095050957f,0.8611363115940525752239464888928095050957f},
			{0f,-0.5384693101056830910363144207002088049672f,0.5384693101056830910363144207002088049672f,-0.9061798459386639927976268782993929651256f,0.9061798459386639927976268782993929651256f},
			{   0.6612093864662645136613995950199053470064f,-0.6612093864662645136613995950199053470064f,-0.2386191860831969086305017216807119354186f,0.2386191860831969086305017216807119354186f,-0.9324695142031520278123015544939946091347f,0.9324695142031520278123015544939946091347f},
			{0f, 0.4058451513773971669066064120769614633473f,-0.4058451513773971669066064120769614633473f,-0.7415311855993944398638647732807884070741f,0.7415311855993944398638647732807884070741f,-0.9491079123427585245261896840478512624007f,0.9491079123427585245261896840478512624007f},
			{  -0.1834346424956498049394761423601839806667f,0.1834346424956498049394761423601839806667f,-0.5255324099163289858177390491892463490419f,0.5255324099163289858177390491892463490419f,-0.7966664774136267395915539364758304368371f,0.7966664774136267395915539364758304368371f,-0.9602898564975362316835608685694729904282f,0.9602898564975362316835608685694729904282f},
			{0f,-0.8360311073266357942994297880697348765441f,0.8360311073266357942994297880697348765441f,-0.9681602395076260898355762029036728700494f,0.9681602395076260898355762029036728700494f,-0.3242534234038089290385380146433366085719f,0.3242534234038089290385380146433366085719f,-0.6133714327005903973087020393414741847857f,0.6133714327005903973087020393414741847857f},
			{  -0.1488743389816312108848260011297199846175f,0.1488743389816312108848260011297199846175f,-0.4333953941292471907992659431657841622000f,0.4333953941292471907992659431657841622000f,-0.6794095682990244062343273651148735757692f,0.6794095682990244062343273651148735757692f,-0.8650633666889845107320966884234930485275f,0.8650633666889845107320966884234930485275f,-0.9739065285171717200779640120844520534282f,0.9739065285171717200779640120844520534282f},
			{0f,-0.2695431559523449723315319854008615246796f,0.2695431559523449723315319854008615246796f,-0.5190961292068118159257256694586095544802f,0.5190961292068118159257256694586095544802f,-0.7301520055740493240934162520311534580496f,0.7301520055740493240934162520311534580496f,-0.8870625997680952990751577693039272666316f,0.8870625997680952990751577693039272666316f,-0.9782286581460569928039380011228573907714f,0.9782286581460569928039380011228573907714f},
			{  -0.1252334085114689154724413694638531299833f,0.1252334085114689154724413694638531299833f,-0.3678314989981801937526915366437175612563f,0.3678314989981801937526915366437175612563f,-0.5873179542866174472967024189405342803690f,0.5873179542866174472967024189405342803690f,-0.7699026741943046870368938332128180759849f,0.7699026741943046870368938332128180759849f,-0.9041172563704748566784658661190961925375f,0.9041172563704748566784658661190961925375f,-0.9815606342467192506905490901492808229601f,0.9815606342467192506905490901492808229601f},
			{0f,-0.2304583159551347940655281210979888352115f,0.2304583159551347940655281210979888352115f,-0.4484927510364468528779128521276398678019f,0.4484927510364468528779128521276398678019f,-0.6423493394403402206439846069955156500716f,0.6423493394403402206439846069955156500716f,-0.8015780907333099127942064895828598903056f,0.8015780907333099127942064895828598903056f,-0.9175983992229779652065478365007195123904f,0.9175983992229779652065478365007195123904f,-0.9841830547185881494728294488071096110649f,0.9841830547185881494728294488071096110649f},
			{  -0.1080549487073436620662446502198347476119f,0.1080549487073436620662446502198347476119f,-0.3191123689278897604356718241684754668342f,0.3191123689278897604356718241684754668342f,-0.5152486363581540919652907185511886623088f,0.5152486363581540919652907185511886623088f,-0.6872929048116854701480198030193341375384f,0.6872929048116854701480198030193341375384f,-0.8272013150697649931897947426503949610397f,0.8272013150697649931897947426503949610397f,-0.9284348836635735173363911393778742644770f,0.9284348836635735173363911393778742644770f,-0.9862838086968123388415972667040528016760f,0.9862838086968123388415972667040528016760f},
			{0f,-0.2011940939974345223006283033945962078128f,0.2011940939974345223006283033945962078128f,-0.3941513470775633698972073709810454683627f,0.3941513470775633698972073709810454683627f,-0.5709721726085388475372267372539106412383f,0.5709721726085388475372267372539106412383f,-0.7244177313601700474161860546139380096308f,0.7244177313601700474161860546139380096308f,-0.8482065834104272162006483207742168513662f,0.8482065834104272162006483207742168513662f,-0.9372733924007059043077589477102094712439f,0.9372733924007059043077589477102094712439f,-0.9879925180204854284895657185866125811469f,0.9879925180204854284895657185866125811469f},
			{  -0.0950125098376374401853193354249580631303f,0.0950125098376374401853193354249580631303f,-0.2816035507792589132304605014604961064860f,0.2816035507792589132304605014604961064860f,-0.4580167776572273863424194429835775735400f,0.4580167776572273863424194429835775735400f,-0.6178762444026437484466717640487910189918f,0.6178762444026437484466717640487910189918f,-0.7554044083550030338951011948474422683538f,0.7554044083550030338951011948474422683538f,-0.8656312023878317438804678977123931323873f,0.8656312023878317438804678977123931323873f,-0.9445750230732325760779884155346083450911f,0.9445750230732325760779884155346083450911f,-0.9894009349916499325961541734503326274262f,0.9894009349916499325961541734503326274262f},
			{0f,-0.1784841814958478558506774936540655574754f,0.1784841814958478558506774936540655574754f,-0.3512317634538763152971855170953460050405f,0.3512317634538763152971855170953460050405f,-0.5126905370864769678862465686295518745829f,0.5126905370864769678862465686295518745829f,-0.6576711592166907658503022166430023351478f,0.6576711592166907658503022166430023351478f,-0.7815140038968014069252300555204760502239f,0.7815140038968014069252300555204760502239f,-0.8802391537269859021229556944881556926234f,0.8802391537269859021229556944881556926234f,-0.9506755217687677612227169578958030214433f,0.9506755217687677612227169578958030214433f,-0.9905754753144173356754340199406652765077f,0.9905754753144173356754340199406652765077f},
			{  -0.0847750130417353012422618529357838117333f,0.0847750130417353012422618529357838117333f,-0.2518862256915055095889728548779112301628f,0.2518862256915055095889728548779112301628f,-0.4117511614628426460359317938330516370789f,0.4117511614628426460359317938330516370789f,-0.5597708310739475346078715485253291369276f,0.5597708310739475346078715485253291369276f,-0.6916870430603532078748910812888483894522f,0.6916870430603532078748910812888483894522f,-0.8037049589725231156824174550145907971032f,0.8037049589725231156824174550145907971032f,-0.8926024664975557392060605911271455154078f,0.8926024664975557392060605911271455154078f,-0.9558239495713977551811958929297763099728f,0.9558239495713977551811958929297763099728f,-0.9915651684209309467300160047061507702525f,0.9915651684209309467300160047061507702525f},
			{0f,-0.1603586456402253758680961157407435495048f,0.1603586456402253758680961157407435495048f,-0.3165640999636298319901173288498449178922f,0.3165640999636298319901173288498449178922f,-0.4645707413759609457172671481041023679762f,0.4645707413759609457172671481041023679762f,-0.6005453046616810234696381649462392798683f,0.6005453046616810234696381649462392798683f,-0.7209661773352293786170958608237816296571f,0.7209661773352293786170958608237816296571f,-0.8227146565371428249789224867127139017745f,0.8227146565371428249789224867127139017745f,-0.9031559036148179016426609285323124878093f,0.9031559036148179016426609285323124878093f,-0.9602081521348300308527788406876515266150f,0.9602081521348300308527788406876515266150f,-0.9924068438435844031890176702532604935893f,0.9924068438435844031890176702532604935893f},
			{  -0.0765265211334973337546404093988382110047f,0.0765265211334973337546404093988382110047f,-0.2277858511416450780804961953685746247430f,0.2277858511416450780804961953685746247430f,-0.3737060887154195606725481770249272373957f,0.3737060887154195606725481770249272373957f,-0.5108670019508270980043640509552509984254f,0.5108670019508270980043640509552509984254f,-0.6360536807265150254528366962262859367433f,0.6360536807265150254528366962262859367433f,-0.7463319064601507926143050703556415903107f,0.7463319064601507926143050703556415903107f,-0.8391169718222188233945290617015206853296f,0.8391169718222188233945290617015206853296f,-0.9122344282513259058677524412032981130491f,0.9122344282513259058677524412032981130491f,-0.9639719272779137912676661311972772219120f,0.9639719272779137912676661311972772219120f,-0.9931285991850949247861223884713202782226f,0.9931285991850949247861223884713202782226f},
			{0f,-0.1455618541608950909370309823386863301163f,0.1455618541608950909370309823386863301163f,-0.2880213168024010966007925160646003199090f,0.2880213168024010966007925160646003199090f,-0.4243421202074387835736688885437880520964f,0.4243421202074387835736688885437880520964f,-0.5516188358872198070590187967243132866220f,0.5516188358872198070590187967243132866220f,-0.6671388041974123193059666699903391625970f,0.6671388041974123193059666699903391625970f,-0.7684399634756779086158778513062280348209f,0.7684399634756779086158778513062280348209f,-0.8533633645833172836472506385875676702761f,0.8533633645833172836472506385875676702761f,-0.9200993341504008287901871337149688941591f,0.9200993341504008287901871337149688941591f,-0.9672268385663062943166222149076951614246f,0.9672268385663062943166222149076951614246f,-0.9937521706203895002602420359379409291933f,0.9937521706203895002602420359379409291933f},
			{  -0.0697392733197222212138417961186280818222f,0.0697392733197222212138417961186280818222f,-0.2078604266882212854788465339195457342156f,0.2078604266882212854788465339195457342156f,-0.3419358208920842251581474204273796195591f,0.3419358208920842251581474204273796195591f,-0.4693558379867570264063307109664063460953f,0.4693558379867570264063307109664063460953f,-0.5876404035069115929588769276386473488776f,0.5876404035069115929588769276386473488776f,-0.6944872631866827800506898357622567712673f,0.6944872631866827800506898357622567712673f,-0.7878168059792081620042779554083515213881f,0.7878168059792081620042779554083515213881f,-0.8658125777203001365364256370193787290847f,0.8658125777203001365364256370193787290847f,-0.9269567721871740005206929392590531966353f,0.9269567721871740005206929392590531966353f,-0.9700604978354287271239509867652687108059f,0.9700604978354287271239509867652687108059f,-0.9942945854823992920730314211612989803930f,0.9942945854823992920730314211612989803930f},
			{0f,-0.1332568242984661109317426822417661370104f,0.1332568242984661109317426822417661370104f,-0.2641356809703449305338695382833096029790f,0.2641356809703449305338695382833096029790f,-0.3903010380302908314214888728806054585780f,0.3903010380302908314214888728806054585780f,-0.5095014778460075496897930478668464305448f,0.5095014778460075496897930478668464305448f,-0.6196098757636461563850973116495956533871f,0.6196098757636461563850973116495956533871f,-0.7186613631319501944616244837486188483299f,0.7186613631319501944616244837486188483299f,-0.8048884016188398921511184069967785579414f,0.8048884016188398921511184069967785579414f,-0.8767523582704416673781568859341456716389f,0.8767523582704416673781568859341456716389f,-0.9329710868260161023491969890384229782357f,0.9329710868260161023491969890384229782357f,-0.9725424712181152319560240768207773751816f,0.9725424712181152319560240768207773751816f,-0.9947693349975521235239257154455743605736f,0.9947693349975521235239257154455743605736f},
			{  -0.0640568928626056260850430826247450385909f,0.0640568928626056260850430826247450385909f,-0.1911188674736163091586398207570696318404f,0.1911188674736163091586398207570696318404f,-0.3150426796961633743867932913198102407864f,0.3150426796961633743867932913198102407864f,-0.4337935076260451384870842319133497124524f,0.4337935076260451384870842319133497124524f,-0.5454214713888395356583756172183723700107f,0.5454214713888395356583756172183723700107f,-0.6480936519369755692524957869107476266696f,0.6480936519369755692524957869107476266696f,-0.7401241915785543642438281030999784255232f,0.7401241915785543642438281030999784255232f,-0.8200019859739029219539498726697452080761f,0.8200019859739029219539498726697452080761f,-0.8864155270044010342131543419821967550873f,0.8864155270044010342131543419821967550873f,-0.9382745520027327585236490017087214496548f,0.9382745520027327585236490017087214496548f,-0.9747285559713094981983919930081690617411f,0.9747285559713094981983919930081690617411f,-0.9951872199970213601799974097007368118745f,0.9951872199970213601799974097007368118745f}
		};

	// Legendre-Gauss weights (wi values, defined by a function linked to in the Bezier primer article)
	private static final float[][] cValues = {{},{},
			{1.0f,1.0f},
			{0.8888888888888888888888888888888888888888f,0.5555555555555555555555555555555555555555f,0.5555555555555555555555555555555555555555f},
			{0.6521451548625461426269360507780005927646f,0.6521451548625461426269360507780005927646f,0.3478548451374538573730639492219994072353f,0.3478548451374538573730639492219994072353f},
			{0.5688888888888888888888888888888888888888f,0.4786286704993664680412915148356381929122f,0.4786286704993664680412915148356381929122f,0.2369268850561890875142640407199173626432f,0.2369268850561890875142640407199173626432f},
			{0.3607615730481386075698335138377161116615f,0.3607615730481386075698335138377161116615f,0.4679139345726910473898703439895509948116f,0.4679139345726910473898703439895509948116f,0.1713244923791703450402961421727328935268f,0.1713244923791703450402961421727328935268f},
			{0.4179591836734693877551020408163265306122f,0.3818300505051189449503697754889751338783f,0.3818300505051189449503697754889751338783f,0.2797053914892766679014677714237795824869f,0.2797053914892766679014677714237795824869f,0.1294849661688696932706114326790820183285f,0.1294849661688696932706114326790820183285f},
			{0.3626837833783619829651504492771956121941f,0.3626837833783619829651504492771956121941f,0.3137066458778872873379622019866013132603f,0.3137066458778872873379622019866013132603f,0.2223810344533744705443559944262408844301f,0.2223810344533744705443559944262408844301f,0.1012285362903762591525313543099621901153f,0.1012285362903762591525313543099621901153f},
			{0.3302393550012597631645250692869740488788f,0.1806481606948574040584720312429128095143f,0.1806481606948574040584720312429128095143f,0.0812743883615744119718921581105236506756f,0.0812743883615744119718921581105236506756f,0.3123470770400028400686304065844436655987f,0.3123470770400028400686304065844436655987f,0.2606106964029354623187428694186328497718f,0.2606106964029354623187428694186328497718f},
			{0.2955242247147528701738929946513383294210f,0.2955242247147528701738929946513383294210f,0.2692667193099963550912269215694693528597f,0.2692667193099963550912269215694693528597f,0.2190863625159820439955349342281631924587f,0.2190863625159820439955349342281631924587f,0.1494513491505805931457763396576973324025f,0.1494513491505805931457763396576973324025f,0.0666713443086881375935688098933317928578f,0.0666713443086881375935688098933317928578f},
			{0.2729250867779006307144835283363421891560f,0.2628045445102466621806888698905091953727f,0.2628045445102466621806888698905091953727f,0.2331937645919904799185237048431751394317f,0.2331937645919904799185237048431751394317f,0.1862902109277342514260976414316558916912f,0.1862902109277342514260976414316558916912f,0.1255803694649046246346942992239401001976f,0.1255803694649046246346942992239401001976f,0.0556685671161736664827537204425485787285f,0.0556685671161736664827537204425485787285f},
			{0.2491470458134027850005624360429512108304f,0.2491470458134027850005624360429512108304f,0.2334925365383548087608498989248780562594f,0.2334925365383548087608498989248780562594f,0.2031674267230659217490644558097983765065f,0.2031674267230659217490644558097983765065f,0.1600783285433462263346525295433590718720f,0.1600783285433462263346525295433590718720f,0.1069393259953184309602547181939962242145f,0.1069393259953184309602547181939962242145f,0.0471753363865118271946159614850170603170f,0.0471753363865118271946159614850170603170f},
			{0.2325515532308739101945895152688359481566f,0.2262831802628972384120901860397766184347f,0.2262831802628972384120901860397766184347f,0.2078160475368885023125232193060527633865f,0.2078160475368885023125232193060527633865f,0.1781459807619457382800466919960979955128f,0.1781459807619457382800466919960979955128f,0.1388735102197872384636017768688714676218f,0.1388735102197872384636017768688714676218f,0.0921214998377284479144217759537971209236f,0.0921214998377284479144217759537971209236f,0.0404840047653158795200215922009860600419f,0.0404840047653158795200215922009860600419f},
			{0.2152638534631577901958764433162600352749f,0.2152638534631577901958764433162600352749f,0.2051984637212956039659240656612180557103f,0.2051984637212956039659240656612180557103f,0.1855383974779378137417165901251570362489f,0.1855383974779378137417165901251570362489f,0.1572031671581935345696019386238421566056f,0.1572031671581935345696019386238421566056f,0.1215185706879031846894148090724766259566f,0.1215185706879031846894148090724766259566f,0.0801580871597602098056332770628543095836f,0.0801580871597602098056332770628543095836f,0.0351194603317518630318328761381917806197f,0.0351194603317518630318328761381917806197f},
			{0.2025782419255612728806201999675193148386f,0.1984314853271115764561183264438393248186f,0.1984314853271115764561183264438393248186f,0.1861610000155622110268005618664228245062f,0.1861610000155622110268005618664228245062f,0.1662692058169939335532008604812088111309f,0.1662692058169939335532008604812088111309f,0.1395706779261543144478047945110283225208f,0.1395706779261543144478047945110283225208f,0.1071592204671719350118695466858693034155f,0.1071592204671719350118695466858693034155f,0.0703660474881081247092674164506673384667f,0.0703660474881081247092674164506673384667f,0.0307532419961172683546283935772044177217f,0.0307532419961172683546283935772044177217f},
			{0.1894506104550684962853967232082831051469f,0.1894506104550684962853967232082831051469f,0.1826034150449235888667636679692199393835f,0.1826034150449235888667636679692199393835f,0.1691565193950025381893120790303599622116f,0.1691565193950025381893120790303599622116f,0.1495959888165767320815017305474785489704f,0.1495959888165767320815017305474785489704f,0.1246289712555338720524762821920164201448f,0.1246289712555338720524762821920164201448f,0.0951585116824927848099251076022462263552f,0.0951585116824927848099251076022462263552f,0.0622535239386478928628438369943776942749f,0.0622535239386478928628438369943776942749f,0.0271524594117540948517805724560181035122f,0.0271524594117540948517805724560181035122f},
			{0.1794464703562065254582656442618856214487f,0.1765627053669926463252709901131972391509f,0.1765627053669926463252709901131972391509f,0.1680041021564500445099706637883231550211f,0.1680041021564500445099706637883231550211f,0.1540457610768102880814315948019586119404f,0.1540457610768102880814315948019586119404f,0.1351363684685254732863199817023501973721f,0.1351363684685254732863199817023501973721f,0.1118838471934039710947883856263559267358f,0.1118838471934039710947883856263559267358f,0.0850361483171791808835353701910620738504f,0.0850361483171791808835353701910620738504f,0.0554595293739872011294401653582446605128f,0.0554595293739872011294401653582446605128f,0.0241483028685479319601100262875653246916f,0.0241483028685479319601100262875653246916f},
			{0.1691423829631435918406564701349866103341f,0.1691423829631435918406564701349866103341f,0.1642764837458327229860537764659275904123f,0.1642764837458327229860537764659275904123f,0.1546846751262652449254180038363747721932f,0.1546846751262652449254180038363747721932f,0.1406429146706506512047313037519472280955f,0.1406429146706506512047313037519472280955f,0.1225552067114784601845191268002015552281f,0.1225552067114784601845191268002015552281f,0.1009420441062871655628139849248346070628f,0.1009420441062871655628139849248346070628f,0.0764257302548890565291296776166365256053f,0.0764257302548890565291296776166365256053f,0.0497145488949697964533349462026386416808f,0.0497145488949697964533349462026386416808f,0.0216160135264833103133427102664524693876f,0.0216160135264833103133427102664524693876f},
			{0.1610544498487836959791636253209167350399f,0.1589688433939543476499564394650472016787f,0.1589688433939543476499564394650472016787f,0.1527660420658596667788554008976629984610f,0.1527660420658596667788554008976629984610f,0.1426067021736066117757461094419029724756f,0.1426067021736066117757461094419029724756f,0.1287539625393362276755157848568771170558f,0.1287539625393362276755157848568771170558f,0.1115666455473339947160239016817659974813f,0.1115666455473339947160239016817659974813f,0.0914900216224499994644620941238396526609f,0.0914900216224499994644620941238396526609f,0.0690445427376412265807082580060130449618f,0.0690445427376412265807082580060130449618f,0.0448142267656996003328381574019942119517f,0.0448142267656996003328381574019942119517f,0.0194617882297264770363120414644384357529f,0.0194617882297264770363120414644384357529f},
			{0.1527533871307258506980843319550975934919f,0.1527533871307258506980843319550975934919f,0.1491729864726037467878287370019694366926f,0.1491729864726037467878287370019694366926f,0.1420961093183820513292983250671649330345f,0.1420961093183820513292983250671649330345f,0.1316886384491766268984944997481631349161f,0.1316886384491766268984944997481631349161f,0.1181945319615184173123773777113822870050f,0.1181945319615184173123773777113822870050f,0.1019301198172404350367501354803498761666f,0.1019301198172404350367501354803498761666f,0.0832767415767047487247581432220462061001f,0.0832767415767047487247581432220462061001f,0.0626720483341090635695065351870416063516f,0.0626720483341090635695065351870416063516f,0.0406014298003869413310399522749321098790f,0.0406014298003869413310399522749321098790f,0.0176140071391521183118619623518528163621f,0.0176140071391521183118619623518528163621f},
			{0.1460811336496904271919851476833711882448f,0.1445244039899700590638271665537525436099f,0.1445244039899700590638271665537525436099f,0.1398873947910731547221334238675831108927f,0.1398873947910731547221334238675831108927f,0.1322689386333374617810525744967756043290f,0.1322689386333374617810525744967756043290f,0.1218314160537285341953671771257335983563f,0.1218314160537285341953671771257335983563f,0.1087972991671483776634745780701056420336f,0.1087972991671483776634745780701056420336f,0.0934444234560338615532897411139320884835f,0.0934444234560338615532897411139320884835f,0.0761001136283793020170516533001831792261f,0.0761001136283793020170516533001831792261f,0.0571344254268572082836358264724479574912f,0.0571344254268572082836358264724479574912f,0.0369537897708524937999506682993296661889f,0.0369537897708524937999506682993296661889f,0.0160172282577743333242246168584710152658f,0.0160172282577743333242246168584710152658f},
			{0.1392518728556319933754102483418099578739f,0.1392518728556319933754102483418099578739f,0.1365414983460151713525738312315173965863f,0.1365414983460151713525738312315173965863f,0.1311735047870623707329649925303074458757f,0.1311735047870623707329649925303074458757f,0.1232523768105124242855609861548144719594f,0.1232523768105124242855609861548144719594f,0.1129322960805392183934006074217843191142f,0.1129322960805392183934006074217843191142f,0.1004141444428809649320788378305362823508f,0.1004141444428809649320788378305362823508f,0.0859416062170677274144436813727028661891f,0.0859416062170677274144436813727028661891f,0.0697964684245204880949614189302176573987f,0.0697964684245204880949614189302176573987f,0.0522933351526832859403120512732112561121f,0.0522933351526832859403120512732112561121f,0.0337749015848141547933022468659129013491f,0.0337749015848141547933022468659129013491f,0.0146279952982722006849910980471854451902f,0.0146279952982722006849910980471854451902f},
			{0.1336545721861061753514571105458443385831f,0.1324620394046966173716424647033169258050f,0.1324620394046966173716424647033169258050f,0.1289057221880821499785953393997936532597f,0.1289057221880821499785953393997936532597f,0.1230490843067295304675784006720096548158f,0.1230490843067295304675784006720096548158f,0.1149966402224113649416435129339613014914f,0.1149966402224113649416435129339613014914f,0.1048920914645414100740861850147438548584f,0.1048920914645414100740861850147438548584f,0.0929157660600351474770186173697646486034f,0.0929157660600351474770186173697646486034f,0.0792814117767189549228925247420432269137f,0.0792814117767189549228925247420432269137f,0.0642324214085258521271696151589109980391f,0.0642324214085258521271696151589109980391f,0.0480376717310846685716410716320339965612f,0.0480376717310846685716410716320339965612f,0.0309880058569794443106942196418845053837f,0.0309880058569794443106942196418845053837f,0.0134118594871417720813094934586150649766f,0.0134118594871417720813094934586150649766f},
			{0.1279381953467521569740561652246953718517f,0.1279381953467521569740561652246953718517f,0.1258374563468282961213753825111836887264f,0.1258374563468282961213753825111836887264f,0.1216704729278033912044631534762624256070f,0.1216704729278033912044631534762624256070f,0.1155056680537256013533444839067835598622f,0.1155056680537256013533444839067835598622f,0.1074442701159656347825773424466062227946f,0.1074442701159656347825773424466062227946f,0.0976186521041138882698806644642471544279f,0.0976186521041138882698806644642471544279f,0.0861901615319532759171852029837426671850f,0.0861901615319532759171852029837426671850f,0.0733464814110803057340336152531165181193f,0.0733464814110803057340336152531165181193f,0.0592985849154367807463677585001085845412f,0.0592985849154367807463677585001085845412f,0.0442774388174198061686027482113382288593f,0.0442774388174198061686027482113382288593f,0.0285313886289336631813078159518782864491f,0.0285313886289336631813078159518782864491f,0.0123412297999871995468056670700372915759f,0.0123412297999871995468056670700372915759f}
		};

	// TODO could use RANGE, but this is faster
	// TODO move to geomutil?
	public static float clamp(float f) {
		if (f <= 0f) return 0f;
		if (f >= 1f) return 1f;
		return f;
	}

	static final FloatMapping REVERSE = FloatMapping.Util.linear(FloatRange.UNIT_CLOSED, 1f, 0f);

	private CurvePath path = null;
	private Curve derivative = null;

	@Override
	public Rect getBounds() {
		return getPath().getBounds();
	}

	@Override
	public CurvePath getPath() {
		return path == null ? createPath() : path;
	}

	@Override
	//TODO could use segment method to implement split as standard on curves?
	//note: guaranteed to split into two curve paths
	//TODO return a curve specific split path?
	public SplitCurvePath splitAt(float p) {
		p = clamp(p);
		return new SplitCurvePath(
				apply(FloatMapping.Util.linear(FloatRange.UNIT_CLOSED, 0f,  p  )).getPath(),
				apply(FloatMapping.Util.linear(FloatRange.UNIT_CLOSED, p,   1f )).getPath(),
				getPath().isClosed()
				);
	}

	@Override
	public Path segment(float minP, float maxP) {
		minP = clamp(minP);
		maxP = clamp(maxP);
		if (minP > maxP) throw new IllegalArgumentException("minP exceeds maxP");
		if (minP == 0f && maxP == 1f) return getPath();
		if (minP == maxP) return pointTangentAt(minP);
		return computeSegment(minP, maxP).getPath();
	}

	@Override
	public Vector tangentAt(float p) {
		return getDerivative().pointAt(p).vectorFromOrigin().normalized();
	}

	@Override
	public PointPath pointTangentAt(float p) {
		return PointPath.from(pointAt(p), tangentAt(p));
	}

	// override for improved performance
	public float magnitudeAt(float p) {
		return Norm.L2.distanceFromOrigin(pointAt(p));
	}

	@Override
	public float lengthAt(float t) {
		if (t <= 0f) return 0f;
		if (t >= 1f) return getPath().getLength();
		return intrinsicToLength(t);
	}

	@Override
	public float parameterNearest(Point pt) {
		float p = new Locator(getPath()).getNearestLengthAlongPath(pt);
		return lengthToIntrinsic(p);
	}

	@Override
	public Path.Location location() {
		return new Path.Location(this, 0);
	}

	// curves are required to be differentiable
	@Override
	public List<Path.Corner> getCorners() {
		return Path.Corner.NO_CORNERS;
	}

	@Override
	public Curve apply(Transform t) {
		return new Transformed(t, this);
	}

	@Override
	public Curve apply(FloatMapping mapping) {
		return FloatMapping.Util.isIdentity(mapping) ? this : new Mapped(mapping, this);
	}

	// method for overriding

	protected Curve computeDerivative() {
		return new Differentiated(this);
	}

	protected ByIntrinsic computeSegment(float minP, float maxP) {
		return splitAt(minP).byIntrinsic().splitAt(maxP - minP).byIntrinsic();
	}

	protected Curve computeReverse() {
		return apply(Curve.REVERSE);
	}

	protected float getDefaultSplitParam() {
		return 0.5f;
	}

	protected boolean isClosed() {
		PointPath s = pointTangentAt(0f);
		PointPath f = pointTangentAt(1f);
		Context context = Context.currentContext();
		return context.isContinuous(s.getStart(), f.getStart()) && !context.isCorner(s.getTangent(), f.getTangent());
	}

	protected boolean isLinear() {
		//TODO remove this mostly useless implementation?
		return pointAt(0f).equals(pointAt(1f));
	}

	protected CurvePath createPath() {
		return new CurvePath(this);
	}

	protected float intrinsicToLength(float t) {
		if (isLinear()) {
			CurvePath path = getPath();
			// special case - used to calculate total length
			// using path length in this instance causes inf. rec.
			return t == 1f ?
					Norm.L2.distanceBetween(path.getStart(), path.getFinish()) :
					path.getLength() * t;
		}

		float z = t / 2;
		float sum = 0;
		int n = Tolerances.current().getQuadratureSteps();
		Curve d = getDerivative();
		if (d == null) return 0f;
		for (int i = 0; i < n; i++) {
			t = z * tValues[n][i] + z;
			sum += cValues[n][i] * d.magnitudeAt(t);
		}
		return z * sum;
	}

	// uses Runge Kutta to integrate
	protected float lengthToIntrinsic(float s) {
		if (s <= 0f) return 0f;
		float length = getPath().getLength();
		if (s >= length) return 1f;
		if (isLinear()) return s / length;
		Curve d = getDerivative();
		if (d == null) return 0f;

		float t = 0f;
		int steps = Tolerances.current().getIterationSteps();
		float h = s / steps;
		for (int i = 0; i < steps; i++) {
			float k1 = h / d.magnitudeAt(t       );
			float k2 = h / d.magnitudeAt(t + k1/2);
			float k3 = h / d.magnitudeAt(t + k2/2);
			float k4 = h / d.magnitudeAt(t + k3  );
			t += (k1 + 2 * (k2 + k3) + k4) / 6;
		}
		return t;
	}

	Curve getDerivative() {
		return derivative == null ? derivative = computeDerivative() : derivative;
	}

	final static class Transformed extends Curve {

		private final Transform transform;
		private final Curve z;

		public Transformed(Transform transform, Curve z) {
			this.transform = transform;
			this.z = z;
		}

		public Point pointAt(float p) {
			return transform.transform( z.pointAt(p) );
		}

		@Override
		public Vector tangentAt(float p) {
			return z.tangentAt(p).apply(transform);
		}

		@Override
		public PointPath pointTangentAt(float p) {
			return z.pointTangentAt(p).apply(transform);
		}

		@Override
		public float lengthAt(float t) {
			return z.lengthAt(t);
		}

		@Override
		public float parameterNearest(Point pt) {
			//TODO want ability to apply transform in reverse
			return z.parameterNearest(transform.transform(pt));
		}

		@Override
		public Path.Location location() {
			return z.location();
		}

		@Override
		public Curve apply(Transform t) {
			if (t.isIdentity()) return this;
			return z.apply(transform.apply(t));
		}

		@Override
		public Curve apply(FloatMapping mapping) {
			Curve z = this.z.apply(mapping);
			return z == this.z ? this : z.apply(mapping);
		}

		@Override
		public SplitCurvePath splitAt(float p) {
			SplitPath split = z.splitAt(p);
			CurvePath firstCurve = (CurvePath) split.getFirstPath().apply(transform);
			CurvePath secondCurve = (CurvePath) split.getLastPath().apply(transform);
			return new SplitCurvePath(firstCurve, secondCurve, getPath().isClosed());
		}

		@Override
		protected float getDefaultSplitParam() {
			return z.getDefaultSplitParam();
		}

		@Override
		protected Curve computeDerivative() {
			return new Transformed(transform, z.getDerivative());
		}

		@Override
		protected boolean isLinear() {
			return z.isLinear();
		}

		@Override
		protected boolean isClosed() {
			return z.isClosed();
		}

		public int hashCode() {
			return transform.hashCode() ^ z.hashCode();
		}

		public boolean equals(Object obj) {
			if (obj == this) return true;
			if (!(obj instanceof Transformed)) return false;
			Transformed that = (Transformed) obj;
			if (!this.transform.equals(that.transform)) return false;
			if (!this.z.equals(that.z)) return false;
			return true;
		}

		public String toString() {
			return z.toString() + " transformed by" + transform;
		}

	}

	final static class Mapped extends Curve {

		private final FloatMapping mapping;
		private final boolean reversed;
		private final Curve z;

		public Mapped(FloatMapping mapping, Curve z) {
			this.mapping = mapping;
			this.z = z;
			FloatRange domain = mapping.getDomain();
			reversed = mapping.map(domain.min) > mapping.map(domain.max);
		}

		@Override
		public Point pointAt(float p) {
			return z.pointAt(mapping.map(p));
		}

		@Override
		public Vector tangentAt(float p) {
			Vector t = z.tangentAt(mapping.map(p));
			return reversed ? t.negated() : t;
		}

		@Override
		public PointPath pointTangentAt(float p) {
			PointPath l = z.pointTangentAt(mapping.map(p));
			return reversed ? l.getReverse() : l;
		}

		@Override
		public float lengthAt(float t) {
			return z.lengthAt(mapping.map(t));
		}

		@Override
		public float parameterNearest(Point pt) {
			if (mapping.getRange().getSize() == 0f) {
				return mapping.getDomain().min;
			}
			float s = z.parameterNearest(pt);
			FloatMapping inverse = mapping.inverse();
			if (inverse.getDomain().containsValue(s)) return inverse.map(s);
			throw new UnsupportedOperationException();
		}

//		@Override
//		public SplitPath<? extends CurvePath, ? extends CurvePath> splitAt(float p) {
//			if (true) throw new UnsupportedOperationException();
//			float q = mapping.map(p);
//			SplitPath<? extends CurvePath, ? extends CurvePath> split = z.splitAt(q);
//			// TODO brittle way of testing for reversal
//			CurvePath curve1 = split.getFirstPath();
//			if (!curve1.getStart().equals(z.getPath().getStart())) {
//				Curve z1 = curve1.getCurve();
//				curve1 = z1.apply(REVERSE).getPath();
//			}
//			CurvePath curve2 = split.getSecondPath();
//			if (!curve2.getFinish().equals(z.getPath().getFinish())) {
//				Curve z2 = curve2.getCurve();
//				curve2 = z2.apply(REVERSE).getPath();
//			}
//			float min = mapping.map(0f);
//			float max = mapping.map(1f);
//			curve1 = curve1.getCurve().apply(FloatMapping.Util.linear(FloatRange.UNIT_CLOSED, min, q)).getPath();
//			curve2 = curve2.getCurve().apply(FloatMapping.Util.linear(FloatRange.UNIT_CLOSED, q, max)).getPath();
//			return new SplitPath<CurvePath, CurvePath>(curve1, curve2);
//		}

		@Override
		public Curve apply(FloatMapping mapping) {
			mapping = FloatMapping.Util.compose(mapping, this.mapping);
			return FloatMapping.Util.isIdentity(mapping) ? z : new Mapped(mapping, z);
		}

		@Override
		protected boolean isLinear() {
			//TODO mapping may actually reduce range, making this curve more approx. linear
			return z.isLinear();
		}

		@Override
		protected ByIntrinsic computeSegment(float minP, float maxP) {
			minP = mapping.map(minP);
			maxP = mapping.map(maxP);
			//TODO should guard against out-of-range values of min/maxP?
			if (reversed) {
				return z.segment(maxP, minP).getReverse().byIntrinsic();
			} else {
				return z.computeSegment(minP, maxP);
			}
		}

		public int hashCode() {
			return mapping.hashCode() ^ z.hashCode();
		}

		public boolean equals(Object obj) {
			if (obj == this) return true;
			if (!(obj instanceof Mapped)) return false;
			Mapped that = (Mapped) obj;
			if (!this.mapping.equals(that.mapping)) return false;
			if (!this.z.equals(that.z)) return false;
			return true;
		}

		public String toString() {
			return z.toString() + " mapped by" + mapping;
		}

	}

	final static class Differentiated extends Curve {

		private final Curve z;
		//private ParametricCurve curve = null;

		Differentiated(Curve z) {
			this.z = z;
		}

		@Override
		public Point pointAt(float p) {
			p = clamp(p);
			float q = Tolerances.current().getDifferential();
			float t1;
			float t2;
			if (Math.abs(p) < Math.abs(1 - p)) {
				t1 = p;
				t2 = p + q;
			} else {
				t1 = p - q;
				t2 = p;
			}
			if (t1 == t2) return Point.ORIGIN;
			Point p1 = z.pointAt(t1);
			Point p2 = z.pointAt(t2);
			return new Point( (p2.x - p1.x)/q, (p2.y - p1.y)/q );
		}

		// note corners are possible, but since differential shouldn't be exposed as a path in its own right, it's okay

	}

}
